:properties:
#+title: Stow
#+author: Oleksii Kapula
:end:

* INTRO

One painful part of keeping a ~.dotfiles~ directory is managing symbolic links between your configuration files and the locations where they need to go in your home directory.

* GETTING STARTED

To get started, make sure you've already set up a ~.dotfiles~ directory.

You'll also need to install GNU Stow, you can find it in the package managers of most GNU/Linux distributions with the name ~stow~.

If you're on Arch based distribution just run ~sudo pacman -S stow~.

* ABOUT GNU STOW

[[https://www.gnu.org/software/stow/][GNU Stow]] describes itself as a "symlink farm manager," but in practical terms it's just a program that can mirror the structure of one directory into another by creating symbolic links back to the original files.

This is extremely useful when you have a directory full of configuration files that is managed by Git and you want to send all of those configuration files to where they belong in your home directory.

* BASIC USAGE

Let's say we've got our configuration files stored in a directory under the home directory called ~.dotfiles~. We can easily create symbolic links to the files in this directory to the equivalent locations in the home directory using the following command:

Before we run that, let's take a look at what's already in the ~.dotfiles~ directory and the home directory:

#+begin_src shell

ls -la ~
ls -la ~/.dotfiles

#+end_src

Now let's run the stow command that I mentioned before:

#+begin_src shell

cd ~/.dotfiles
stow .
ls -la ~

#+end_src

We can now see that all of the configuration files under ~~/.dotfiles~, even those in child directories, have had symbolic links created!

It's possible that you will receive an error saying that the target file or link already exists so you might need to remove existing files before this command will succeed.

* HOW IT WORKS

[[https://www.gnu.org/software/stow/][GNU Stow]] walks the file and directory hierarchy of the directory passed as the first parameter to the ~stow~ command and creates symbolic links to those files in the equivalent locations in the target directory.

The important thing to be aware of here is that our ~.dotfiles~ directory *must have the same layout* as where the files would be placed under the home directory. This means you will need to have the equivalent subdirectory structure in your ~.dotfiles~ folder so that all symbolic links get created in the right place.

One thing you may have noticed: we didn't specify what the target directory is! By default, ~stow~ assumes that the target directory is the parent directory of the one that you specified.

This means that ~stow .~ is equivalent to:

#+begin_src shell

stow --dir=~/.dotfiles --target=~/

# OR

stow -d ~/.dotfiles -t ~/

#+end_src

This means that you have full control over the source and target directories that ~stow~ uses!

*TIP:* If you keep your dotfiles directory somewhere other than the home folder, I'd recommend creating a simple Bash script for invoking ~stow~ with the right parameters since you'll probably have to run it occasionally.

* IGNORING FILE AND DIRECTORIES

By default, GNU Stow does a good job of [[https://www.gnu.org/software/stow/manual/stow.html#Types-And-Syntax-Of-Ignore-Lists][ignoring common files and directories]] you might not want to be linked back to your home directory like ~README~ and ~LICENSE~ files, source control folders.

Let's say you have other files in your dotfiles folder that you don't want to have linked to your home directory. For example, our dotfiles folder has a ~stow.org~ file. That really doesn't need to be in our home folder.

To skip files like this, we can create a file in our dotfiles folder called ~.stow-local-ignore~. Each line of this file should be a string or regular expression representing any file or directory you don't want to link to your home folder.

Here's an example:

#+begin_src shell

\.git
\.gitignore
stow.org

#+end_src

This will avoid linking the ~.git~ folder *(important!)*, a ~.gitignore~ file and also a ~stow.org~.

An important detail here is that specifying your own ignore file will override Stow's default ignore list! For example: we now need to add ~LICENSE~ to this list to ensure it doesn't get linked.

[[https://www.gnu.org/software/stow/manual/stow.html#Types-And-Syntax-Of-Ignore-Lists][GNU Stow Manual: Types and Syntax of Ignore Lists]]

* CLEANING UP SYMBOLIC LINKS

If for some reason you'd like to get rid of all the symbolic links that GNU Stow created in your home folder, you can do that with one extra parameter to the command we've been running so far:

#+begin_src shell

stow -D .

#+end_src

All of the previously-created symbolic links in the home directory will now be gone!
